{"version":3,"sources":["components/Header.js","components/OptionsTab.js","components/TableHead.js","components/TableRow.js","pages/Directory.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","OptionsTab","props","filter","sort","value","onChange","setFilter","setSort","TableHead","scope","TableRow","myId","firstName","lastName","department","role","salary","Directory","state","viewList","EmployeeList","event","console","log","myFilter","target","setState","newArray","emp","mySort","a","b","this","map","employee","key","id","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.09e19b08.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\n\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className={\"App-header row-lg\"}> \r\n        <h1>Welcome to the Employee Monitoring System</h1> \r\n        </div>\r\n        );\r\n    }\r\n    export default Header;","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nfunction OptionsTab(props) {\r\n    return (\r\n\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className={\"col-12\"}>\r\n                    <h5>Instructions:</h5> \r\n                     <p>Select a value to sort and a value to filter by. </p>\r\n                    <p>Currently Filtered By: {props.filter} department{props.filter === \"all\" ? \"s\" : \"\"} </p>\r\n                    <p>Currently Sorted By: {props.sort}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                    <select className=\"custom-select\" value={props.filter} onChange={props.setFilter}>                       \r\n                        <option value=\"all\">Filter By: All</option>\r\n                        <option value=\"Propaganda\">Filter By: Propaganda Department</option>\r\n                        <option value=\"Executive\">Filter By: Executive Department </option>\r\n                        <option value=\"Acquisitions\">Filter By: Acquisitions Department</option>\r\n                        <option value=\"Intelligence\">Filter By: Intelligence Department</option>\r\n                        \r\n                    </select>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <select className=\"custom-select\" value={props.sort} onChange={props.setSort}>\r\n                        <option value=\"default\">Sort By: default </option>\r\n                        <option value=\"id\">Sort By: Id </option>\r\n                        <option value=\"firstName\">Sort By: First Name</option>\r\n                        <option value=\"lastName\">Sort By: Last Name</option>\r\n                        <option value=\"department\">Sort By: Department</option>\r\n                    </select>\r\n\r\n                </div>\r\n            </div >\r\n        </div >\r\n    );\r\n}\r\nexport default OptionsTab;","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\n// need to figure out how to make this appear as a single row in a table... \r\n//probably do that from directory\r\nfunction TableHead(props) {\r\n    return (\r\n        <tr>\r\n            <th scope={\"col\"}>ID</th>\r\n            <th scope={\"col\"}>First Name</th>\r\n            <th scope={\"col\"}>Last Name</th>\r\n            <th scope={\"col\"}>Department</th>\r\n            <th scope={\"col\"}>Role</th>\r\n            <th scope={\"col\"}>Salary</th>\r\n          \r\n            \r\n        </tr>\r\n        );\r\n}\r\nexport default TableHead;\r\n\r\n    // this should be a single row of informaion; \r\n    //so a bunch of columns displaying a specific stat for each empoloyee\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\n\r\n\r\nfunction TableRow(props) {\r\n    return (\r\n        <tr>\r\n\r\n            <td>\r\n                <span>{props.myId}</span>\r\n            </td>\r\n            <td>\r\n                <span>{props.firstName}</span>\r\n            </td>\r\n            <td>\r\n                <span>{props.lastName}</span>\r\n            </td>\r\n            <td>\r\n                <span>{props.department}</span>\r\n            </td>\r\n            <td>\r\n                <span>{props.role}</span>\r\n            </td>\r\n            <td>\r\n                <span>${props.salary}</span>\r\n            </td>\r\n     \r\n\r\n        </tr>\r\n\r\n\r\n    );\r\n}\r\nexport default TableRow;\r\n\r\n    // this should be a single row of informaion; \r\n    //so a bunch of columns displaying a specific stat for each empoloyee","import React from \"react\";\r\nimport OptionsTab from \"../components/OptionsTab\";\r\nimport \"../App.css\";\r\nimport TableHead from \"../components/TableHead\"\r\nimport TableRow from \"../components/TableRow\"\r\n// consider renaming DirectoryTable?\r\nimport EmployeeList from \"../utils/EmployeeList.json\"\r\n\r\nclass Directory extends React.Component {\r\n    state = {\r\n        filter: \"All\",  //ideally I shoudl add some code to change things into lowercase\r\n        sort: \"Default\",\r\n        viewList: EmployeeList\r\n        //this should initialize view list to the json data\r\n    };\r\n\r\n    setFilter = (event) => {\r\n        console.log(\"setFilter function\");\r\n        let myFilter = event.target.value;\r\n        console.log(myFilter);\r\n        this.setState({ filter: myFilter });\r\n        let newArray = EmployeeList.filter(emp => emp.department === myFilter);\r\n        if (myFilter === \"all\") {\r\n            this.setState({ viewList: EmployeeList });    //Worked!\r\n        } else {\r\n            this.setState({ viewList: newArray });    //did not work!\r\n        }\r\n    }\r\n\r\n    setSort = (event) => {\r\n        console.log(\"setSort function\");\r\n        let mySort = event.target.value;\r\n        console.log(mySort);\r\n        let sortingArray = this.state.viewList;\r\n        // sortingArray.sort(function = (a,b) => {});\r\n        sortingArray.sort(function(a,b) {\r\n            //a.mySort  // that wont work, will it?\r\n            \r\n        });\r\n\r\n        // let sortedArray = this.state.viewList.sort();   //testing; not a good function!\r\n        // I need to sort objects by a property...\r\n        // let sortedArray = this.state.viewList.sort();\r\n\r\n        // console.log(sortedArray);\r\n\r\n        /*\r\n        array.sort(compareFunction)\r\n        \r\n        function(a, b){return a-b}\r\n        When the sort() method compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value.\r\n        \r\n        Example:\r\n        \r\n        When comparing 40 and 100, the sort() method calls the compare function(40,100).\r\n        \r\n        The function calculates 40-100, and returns -60 (a negative value).\r\n        \r\n        The sort function will sort 40 as a value lower than 100.\r\n        */\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // componentDidMount() {\r\n\r\n    //     console.log(\"mounted\");\r\n\r\n    // }\r\n    // componentDidUpdate() {\r\n\r\n    //     console.log(\"component did update\")\r\n    // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <OptionsTab\r\n                    setFilter={this.setFilter}\r\n                    setSort={this.setSort}\r\n                    filter={this.state.filter}\r\n                    sort={this.state.sort}\r\n                />\r\n                <table className=\"table table-dark\">\r\n                    <thead>\r\n                        <TableHead />\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.viewList.map(employee => (\r\n                            <TableRow\r\n                                key={employee.id}\r\n                                myId={employee.id}\r\n                                firstName={employee.firstName}\r\n                                lastName={employee.lastName}\r\n                                department={employee.department}\r\n                                role={employee.role}\r\n                                salary={employee.salary}\r\n                            />\r\n                        ))}\r\n\r\n                    </tbody>\r\n                    {/* <p>TestVar {this.state.testVar}</p> */}\r\n                </table>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\nexport default Directory;","import React from \"react\";\n\nimport \"./App.css\";\nimport Header from \"./components/Header\"\nimport Directory from \"./pages/Directory\"\n// import OptionsTab from \"./components/OptionsTab\";\n\nfunction App() {\n  return (\n    <div className={\"container-lg main-background\"}>\n      {/* bootsap needs testing - does multiple classes work? */}\n\n      <Header />\n      <Directory />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}